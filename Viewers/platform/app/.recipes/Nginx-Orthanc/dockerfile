# Stage 1: Build the application
FROM node:20.18.1-slim as builder

# Setup the working directory
RUN mkdir /usr/src/app
WORKDIR /usr/src/app

# Install dependencies
# apt-get update is combined with apt-get install to avoid using outdated packages
RUN apt-get update && apt-get install -y build-essential python3

# Copy package.json and other dependency-related files first
# Assuming your package.json and yarn.lock or similar are located in the project root

COPY ./ /usr/src/app/

# Install node dependencies
RUN yarn config set workspaces-experimental true
RUN yarn install

# To change color of negative point
RUN rm -rf /usr/src/app/node_modules/@cornerstonejs/tools/dist/esm/tools/base/AnnotationTool.js

RUN rm -rf /usr/src/app/node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ProbeTool.js
RUN rm -rf /usr/src/app/node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/RectangleROITool.js

RUN rm -rf /usr/src/app/node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationRenderingEngine.js
#RUN rm -rf /usr/src/app/node_modules/@cornerstonejs/tools/dist/cjs/tools/annotation/ProbeTool.js
#RUN rm -rf /usr/src/app/node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ProbeTool.js

#RUN rm -rf /usr/src/app/node_modules/@cornerstonejs/core/dist/cjs/utilities/sortImageIdsAndGetSpacing.js
#RUN rm -rf /usr/src/app/node_modules/@cornerstonejs/core/dist/esm/utilities/sortImageIdsAndGetSpacing.js

#RUN rm -rf /usr/src/app/node_modules/@cornerstonejs/adapters/dist/adapters.es.js

#RUN rm -rf /usr/src/app/node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/createLabelmapVolumeForViewport.js
#RUN rm -rf /usr/src/app/node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/polySeg/Labelmap/labelmapComputationStrategies.js
#RUN rm -rf /usr/src/app/node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/polySeg/Labelmap/convertContourToLabelmap.js

#RUN rm -rf /usr/src/app/node_modules/@cornerstonejs/tools/dist/cjs/utilities/triggerAnnotationRender.js
#RUN rm -rf /usr/src/app/node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRender.js

# To change color of negative point
COPY ./backup/esm/AnnotationTool.js /usr/src/app/node_modules/@cornerstonejs/tools/dist/esm/tools/base/

COPY ./backup/esm/RectangleROITool.js /usr/src/app/node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/

#COPY ./backup/cjs/ProbeTool.js /usr/src/app/node_modules/@cornerstonejs/tools/dist/cjs/tools/annotation/
COPY ./backup/esm/ProbeTool.js /usr/src/app/node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/

COPY ./backup/esm/SegmentationRenderingEngine.js /usr/src/app/node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/

#COPY ./backup/cjs/sortImageIdsAndGetSpacing.js /usr/src/app/node_modules/@cornerstonejs/core/dist/cjs/utilities/
#COPY ./backup/esm/sortImageIdsAndGetSpacing.js /usr/src/app/node_modules/@cornerstonejs/core/dist/esm/utilities/

#COPY ./backup/adapters/adapters.es.js /usr/src/app/node_modules/@cornerstonejs/adapters/dist/

#COPY ./backup/cornerstone2.0_patch/createLabelmapVolumeForViewport.js /usr/src/app/node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/
#COPY ./backup/cornerstone2.0_patch/labelmapComputationStrategies.js /usr/src/app/node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/polySeg/Labelmap/
#COPY ./backup/cornerstone2.0_patch/convertContourToLabelmap.js /usr/src/app/node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/polySeg/Labelmap/

#COPY ./backup/cjs/triggerAnnotationRender.js /usr/src/app/node_modules/@cornerstonejs/tools/dist/cjs/utilities/
#COPY ./backup/esm/triggerAnnotationRender.js /usr/src/app/node_modules/@cornerstonejs/tools/dist/esm/utilities/

# Copy the rest of the application code

# set QUICK_BUILD to true to make the build faster for dev
ENV APP_CONFIG=config/docker-nginx-orthanc.js

# Build the application
RUN yarn run build:dev

# # Stage 2: Bundle the built application into a Docker container which runs NGINX using Alpine Linux
FROM nginx:alpine

# # Create directories for logs and html content if they don't already exist
RUN mkdir -p /var/log/nginx /var/www/html


# # Copy build output to serve static files
COPY --from=builder /usr/src/app/platform/app/dist /var/www/html

# # Expose HTTP and HTTPS ports
EXPOSE 1025 1026

# # Start NGINX
CMD ["nginx", "-g", "daemon off;"]
